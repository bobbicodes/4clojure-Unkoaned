;; 58 Function Composition [m]

param list takes a variable number of funcs,
applies them from right-to-left

(= [3 2 1] ((__ rest reverse) [1 2 3 4]))	
(= 5 ((__ (partial + 3) second) [1 2 3 4]))
(= true ((__ zero? #(mod % 8) +) 3 5 7 9))
(= "HELLO"
   ((__ #(.toUpperCase %) #(apply str %) take)
    5 "hello world"))

(fn [& s]
  (fn [& args]
    (reduce
      (fn [r f] (f r))
      (apply (last s) args)
      (rest (reverse s)))))

((__ rest reverse) [1 2 3 4])

(fn [& fs]
    (fn [& args] (let [f_list (reverse fs) f_result (apply (first f_list) args)]
         (loop [r f_result  rf (rest f_list)]
          (if (empty? rf) r
              (recur ((first rf) r) (rest rf)))))))

(fn [& fs]
    (reduce (fn [f g]
              #(f (apply g %&))) fs))