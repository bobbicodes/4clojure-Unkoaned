;; 64 Reduce

Takes 2 arg func, optional init val,
applies func to first 2 items in seq
(or starting value and first element of the seq).
next, func called on previous return value and next from seq,
thus reducing the entire coll to one value.

user=> (source reduce)
(defn reduce
  "f is func of 2 args.
  If val not supplied,
  returns result of applying f to first 2 items in coll,
  then applying f to that result and the 3rd item, etc.
  If coll contains no items, f accepts no args,
  and reduce returns the result of calling f with no args.
  If coll has 1 item, it is returned and f is not called.
  If val is supplied, returns result of applying f to val
  and the first item in coll,
  then applying f to that result and 2nd item, etc.
  If coll contains no items, returns val and f is not called."
  ([f coll]
     (if (instance? clojure.lang.IReduce coll)
       (.reduce ^clojure.lang.IReduce coll f)
       (clojure.core.protocols/coll-reduce coll f)))
  ([f val coll]
     (if (instance? clojure.lang.IReduceInit coll)
       (.reduce ^clojure.lang.IReduceInit coll f val)
       (clojure.core.protocols/coll-reduce coll f val))))

(reduce + [1 2 3 4 5]) ;;=> 15 
(reduce + []) ;;=> 0
(reduce + 1 [2 3]) ;;=> 6